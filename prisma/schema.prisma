// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgres"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// model Content {
//   id              String          @id @default(cuid())
//   nonce           Bytes           @db.ByteA
//   content         Bytes           @db.ByteA
// }

model Attachment {
  id              String          @id @default(cuid())
  name            String          @db.VarChar(255)
  mimeType        String          @db.VarChar(255)
  url             String

  mailId          String
  mail            Mail            @relation(references: [id], fields: [mailId])
}

enum MailTypes {
  Inbound
  Outbound
  Draft
}

model Mail {
  id              String          @id @default(cuid())
  type            MailTypes
  from            String
  to              String[]
  cc              String[]
  bcc             String[]
  at              DateTime
  recvDelay       Int
  messageId       String?         @db.VarChar(995)
  subject         String?
  html            String?
  attachments     Attachment[]

  unsuccessful    String[]

  inReplyTo       String?        
  inReplyToMail   Mail?           @relation("Reply", fields: [inReplyTo], references: [id])
  replies         Mail[]          @relation("Reply")

  convoId         String
  convo           Convo           @relation(fields: [convoId], references: [id])

  @@index([convoId])
}

model Convo {
  id              String          @id @default(cuid())
  subject         String?
  interlocutors   String[]
  mails           Mail[]

  latest          DateTime

  folderId        String 
  folder          Folder          @relation(fields: [folderId], references: [id])

  @@index([folderId])
}

enum FolderTypes {
  Inbox
  Sent
  Drafts
  Spam
  Deleted
  Other
}

model Folder {
  id              String          @id @default(cuid())
  name            String
  type            FolderTypes

  addressId       String
  address         Address         @relation(fields: [addressId], references: [id])

  convos          Convo[]

  @@unique([name, type, addressId])
  @@index([addressId])
}

model Address {
  id              String          @id @default(cuid())
  name            String          @db.VarChar(320) @unique
  catchAll        Boolean

  folders         Folder[]

  subdomainId     String
  subdomain       Subdomain       @relation(fields: [subdomainId], references: [id])
  usersLink       UsersOnAddressesLink[]

  @@index([subdomainId])
}

model UsersOnAddressesLink {
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  addressId       String
  address         Address         @relation(fields: [addressId], references: [id])

  consult         Boolean?
  view            Boolean?
  compose         Boolean?
  send            Boolean?
  delete          Boolean?

  mute            Boolean?

  @@id([userId, addressId])
  @@index([userId])
  @@index([addressId])
}

model Subdomain {
  id              String          @id @default(cuid())
  name            String          @db.VarChar(249) @unique

  domainId        String
  domain          Domain          @relation(fields: [domainId], references: [id])
  usersLink       UsersOnSubdomainsLink[]

  addresses       Address[]

  @@index([domainId])
}

model UsersOnSubdomainsLink {
  userId          String         
  user            User            @relation(fields: [userId], references: [id])
  subdomainId     String         
  subdomain       Subdomain       @relation(fields: [subdomainId], references: [id])

  consult         Boolean?
  view            Boolean?
  compose         Boolean?
  createMail      Boolean?
  send            Boolean?
  delete          Boolean?

  mute            Boolean?

  @@id([userId, subdomainId])
  @@index([userId])
  @@index([subdomainId])
}

// Note to future self
// If you are ever to add to the Domain model and
// happen to expect to use that in the front-end,
// don't forget to change their select parameters
// inside of main page
model Domain {
  id              String          @id @default(cuid())
  name            String          @db.VarChar(253) @unique
  privDkim        Bytes           @db.ByteA

  usersLink       UsersOnDomainsLink[]

  subdomains      Subdomain[]
}

model UsersOnDomainsLink {
  userId          String         
  user            User            @relation(fields: [userId], references: [id])
  domainId        String         
  domain          Domain          @relation(fields: [domainId], references: [id])

  consult         Boolean?
  view            Boolean?
  compose         Boolean?
  createMail      Boolean?
  createSub       Boolean?
  send            Boolean?
  delete          Boolean?

  mute            Boolean?

  @@id([userId, domainId])
  @@index([userId])
  @@index([domainId])
}

model User {
  id              String          @id @default(cuid())
  username        String          @db.VarChar(255) @unique
  webPushSubData  String[]
  passwordHash    String
  lastPwChange    DateTime

  domainsLink     UsersOnDomainsLink[]
  subdomainsLink  UsersOnSubdomainsLink[]
  addressesLink   UsersOnAddressesLink[]
}
